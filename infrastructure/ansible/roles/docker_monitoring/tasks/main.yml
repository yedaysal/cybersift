---
# tasks file for docker_monitoring

- name: Ensure /opt/cybersift/docker_monitoring directory exists
  file:
    path: "{{ stack_path }}"
    state: directory

- name: Ensure stack compose file exists on the target server
  template:
    src: "docker-compose.yml.j2"
    dest: "{{ stack_path }}/docker-compose.yml"

- name: Ensure the stack is up
  shell: "docker-compose up -d"
  args:
    chdir: "{{ stack_path }}"

- name: Ensure Grafana admin user password is changed
  uri:
    url: "http://localhost:3000/api/user/password"
    user: "{{ vault.grafana_security.admin_user }}"
    password: "admin"
    force_basic_auth: true
    method: PUT
    body_format: json
    body: >
      {
        "oldPassword":"admin",
        "newPassword":"{{ vault.grafana_security.admin_password }}"
      }
    status_code:
      - 200
  register: uri_output
  until: uri_output.status == 200
  retries: 12 # Retries for 12 * 5 seconds = 60 seconds
  delay: 5 # Retry every 5 seconds

- name: Check if Grafana InfluxDB datasource exists
  uri:
    url: "http://localhost:3000/api/datasources/name/InfluxDB"
    user: "{{ vault.grafana_security.admin_user }}"
    password: "{{ vault.grafana_security.admin_password }}"
    force_basic_auth: true
    method: GET
    status_code: [200, 404]
  register: datasource_check

- name: Ensure Grafana InfluxDB datasource is added
  grafana_datasource:
    grafana_url: "http://localhost:3000"
    grafana_user: "{{ vault.grafana_security.admin_user }}"
    grafana_password: "{{ vault.grafana_security.admin_password }}"
    org_id: "1"
    name: "InfluxDB"
    ds_type: "influxdb"
    access: "proxy"
    ds_url: "http://influxdb:8086"
    database: "influx"
    user: "{{ vault.influxdb.admin_user }}"
    additional_secure_json_data:
      password: "{{ vault.influxdb.admin_password }}"
  when: datasource_check.status != 200
  register: influxdb_ds_result

- name: Ensure telegraf dashboard json exists on the target server
  template:
    src: "telegraf-system-metrics.json.j2"
    dest: "/tmp/telegraf-system-metrics.json"

- name: Ensure 'Telegraf - system metrics' dashboard exists
  grafana_dashboard:
    grafana_url: "http://localhost:3000"
    grafana_user: "{{ vault.grafana_security.admin_user }}"
    grafana_password: "{{ vault.grafana_security.admin_password }}"
    path: "/tmp/telegraf-system-metrics.json"
    commit_message: Updated by ansible
    state: present
    overwrite: true